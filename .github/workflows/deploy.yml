# 工作流名称：部署 Node.js 应用到 GitHub Pages
name: Deploy zhaomoshou to GitHub Pages

# 触发条件
on:
  # 当推送到 main 分支时自动触发
  push:
    branches: ['main'] # 如果你的默认分支是 master，请改为 ['master']

  # 允许在 GitHub Actions 界面手动触发（用于调试或强制重新部署）
  workflow_dispatch:

# 全局权限设置（必须！用于安全地部署到 GitHub Pages）
permissions:
  contents: write # 允许读取仓库代码
  pages: write # 允许写入 GitHub Pages
  id-token: write # 允许使用 OIDC 进行身份验证（安全令牌）

# 定义工作流中的任务（Jobs）
jobs:
  # =============
  # 任务 1: 构建静态文件
  # =============
  build:
    name: Build static site
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虚拟环境
    env:
      TZ: 'Asia/Shanghai'  # 关键！设置为中国时区
    steps:
      # 1. 检出仓库代码
      - name: Checkout latest code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Rebase onto latest main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main

      # 2. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22' # 使用你项目所需的 Node.js 版本
          cache: 'npm' # 自动缓存 node_modules，加速后续构建

      # 3. 安装依赖（支持 npm / yarn / pnpm）
      - name: Install dependencies
        run: npm ci # 推荐使用 `npm ci`（比 `npm install` 更快、更可靠）

        # ===== 新增：下载之前的构建文件 =====
      - name: Download previous build artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ${{ github.workflow }}.yml  # 自动获取当前 workflow 文件名
          name: previous-build
          workflow_conclusion: success
          path: ./previous-dist
        continue-on-error: true  # 首次运行时没有 artifact 也不失败
      
      # ===== 新增：恢复之前的文件到构建目录 =====
      - name: Restore previous files
        run: |
          mkdir -p ./dist
          if [ -d "./previous-dist" ] && [ "$(ls -A ./previous-dist)" ]; then
            cp -r ./previous-dist/* ./dist/
            echo "Restored previous build files"
          else
            echo "No previous build files found, starting fresh"
          fi

      # 4. 构建静态文件
      #    假设你的 package.json 中有 "scripts": { "build": "node build.js" }
      - name: Build static site
        run: npm run build # 确保此命令会生成 ./dist 目录（或你指定的输出目录）

      # ===== 新增：保存当前构建作为下次的"之前版本" =====
      - name: Upload current build as artifact
        uses: actions/upload-artifact@v4
        with:
          name: previous-build
          path: ./dist
          retention-days: 2  # 保留2天

      # 5. 上传构建产物（供部署任务使用）
      #    注意：路径必须与你的构建输出目录一致（如 dist, public, build 等）
      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
      
      - name: Auto commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: update build artifacts [skip ci]'
          file_pattern: 'data/**'
          skip_dirty_check: true
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_author: jamoreal <171302883+jamoreal@users.noreply.github.com>

  # =============
  # 任务 2: 部署到 GitHub Pages
  # =============
  deploy:
    name: Deploy to GitHub Pages
    # 依赖 build 任务，只有 build 成功才会执行 deploy
    needs: build

    # 指定运行环境（必须与 GitHub Pages 集成）
    environment:
      name: github-pages # 环境名称（会在仓库 Settings > Environments 中显示）
      url: ${{ steps.deployment.outputs.page_url }} # 部署成功后显示可点击的网站链接

    runs-on: ubuntu-latest

    # 部署步骤（必须独立，不能与构建混在一起）
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # GitHub 官方部署 Action（无需分支，更安全）
